// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/authors": {
            "get": {
                "description": "Get Authors",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "To get details of all authors",
                "responses": {
                    "200": {
                        "description": "All authors",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Author"
                            }
                        }
                    },
                    "404": {
                        "description": "StatusNotFound",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "StatusInternalServerError",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/authors/create": {
            "post": {
                "description": "Create a new author",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "To create a new author",
                "parameters": [
                    {
                        "description": "New author request body parameters",
                        "name": "author",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Author"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New author created",
                        "schema": {
                            "$ref": "#/definitions/models.Author"
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "DefaultError",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/authors/{id}": {
            "get": {
                "description": "Get Author by ID",
                "tags": [
                    "authors"
                ],
                "summary": "To get details of an author with it's id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Author ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Author` + "`" + `` + "`" + ` stored at the given ID",
                        "schema": {
                            "$ref": "#/definitions/models.Author"
                        }
                    },
                    "404": {
                        "description": "StatusNotFound",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "StatusInternalServerError",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Author",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "To delete an author with the given id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Author ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted author successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "StatusNotFound",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/authors/{id}/edit": {
            "put": {
                "description": "Update Author",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "To update an author with the given id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Author ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update author request body parameters",
                        "name": "author",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Author"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated author details successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "StatusNotFound",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "DefaultError",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/books": {
            "get": {
                "description": "Get Books",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "To get details of all books",
                "responses": {
                    "200": {
                        "description": "All books",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Book"
                            }
                        }
                    },
                    "404": {
                        "description": "StatusNotFound",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "StatusInternalServerError",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/books/create": {
            "post": {
                "description": "Create a new book",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "To create a new book",
                "parameters": [
                    {
                        "description": "New book request body parameters",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New book created",
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "DefaultError",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/books/{id}": {
            "get": {
                "description": "Get Book by ID",
                "tags": [
                    "books"
                ],
                "summary": "To get details of a book with it's id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Book stored at the given ID",
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    },
                    "404": {
                        "description": "StatusNotFound",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "StatusInternalServerError",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Book",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "To delete a book with the given id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted book successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "StatusNotFound",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/books/{id}/edit": {
            "put": {
                "description": "Update Book",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "To update a book with the given id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update book request body parameters",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Book"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated book details successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "StatusNotFound",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "InternalServerError",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "description": "DefaultError",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "To login a registered user",
                "parameters": [
                    {
                        "description": "Login request body parameters",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "WELCOME! 'user.Email'. Login successful.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "StatusBadRequest",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "StatusUnathorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "StatusNotFound",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "StatusInternalServerError",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "UserLogout",
                "tags": [
                    "users"
                ],
                "summary": "To logout",
                "responses": {
                    "200": {
                        "description": "Logout successful.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "StatusBadRequest",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "To register a user",
                "parameters": [
                    {
                        "description": "Register User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "StatusBadRequest",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "StatusInternalServerError",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Author": {
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Harsimran"
                }
            }
        },
        "models.Book": {
            "type": "object",
            "required": [
                "author",
                "id",
                "title"
            ],
            "properties": {
                "author": {
                    "description": "ISBN        string  ` + "`" + `json: \"isbn\"` + "`" + `",
                    "$ref": "#/definitions/models.Author"
                },
                "description": {
                    "type": "string",
                    "example": "A book on Golang"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "Heyy! Go"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "hshs@gmail.com"
                },
                "name": {
                    "type": "string",
                    "example": "Harsimran"
                },
                "password": {
                    "type": "string",
                    "example": "hars123456"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Swagger REST API",
	Description: "A Book - Author REST API",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
